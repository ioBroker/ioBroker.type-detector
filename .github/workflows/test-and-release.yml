# This is a composition of lint and test scripts
# Make sure to update this file along with the others

name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - '*'
    tags:
      # normal versions
      - "v?[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v?[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

jobs:
  # Performs quick checks before the expensive test runs
  check-and-lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x


      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build:ts

#      - name: Perform a type check
#        run: npm run check:ts
#        env:
#          CI: true
      # - name: Lint TypeScript code
      #   run: npm run lint
#      - name: Test package files
#        run: npm run test:package

  # Runs adapter tests on all supported node versions and OSes
  adapter-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [check-and-lint]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build:ts

      - name: Run local tests
        #         npm downgrade to 6 (mainly for node.js 16) is needed because else testing fails
        #         after installing additional adapters
        run: |
          npm install -g npm@6
          npm test
#      - name: Run unit tests
#        run: npm run test:unit
#      - name: Run integration tests # (linux/osx)
#        if: startsWith(runner.OS, 'windows') == false
#        run: DEBUG=testing:* npm run test:integration
#      - name: Run integration tests # (windows)
#        if: startsWith(runner.OS, 'windows')
#        run: set DEBUG=testing:* & npm run test:integration

  # Deploys the final package to NPM
  auto-merge:
    needs: [adapter-tests]

    # Trigger this step only when a commit on master is tagged with a version number
    if: |
      always() &&
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - id: automerge
        name: automerge
        uses: "pascalgn/automerge-action@v0.16.3"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: "automated pr ðŸ”§"
          MERGE_FILTER_AUTHOR: "foxriver76"
          MERGE_FORKS: "false"
          MERGE_DELETE_BRANCH: "false"
          UPDATE_LABELS: "automated pr ðŸ”§"
          MERGE_METHOD: "squash"
          MERGE_COMMIT_MESSAGE: "pull-request-title-and-description"

      - name: Checkout repository
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch the history, or this action won't work
          ref: 'master'

      - name: Use Node.js 18
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Determine version
        if: steps.automerge.outputs.mergeResult == 'merged'
        id: version
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            return require('./package.json').version;

      - name: Install dependencies
        if: steps.automerge.outputs.mergeResult == 'merged'
        run: npm i

      - name: Build
        if: steps.automerge.outputs.mergeResult == 'merged'
        run: npm run build

      - name: Extract the commit body
        if: steps.automerge.outputs.mergeResult == 'merged'
        id: extract_release
        # The body may be multiline, therefore we need to escape some characters
        run: |
          BODY=$(git show -s --format=%b)
          BODY="${BODY//'%'/'%25'}"
          BODY="${BODY//$'\n'/'%0A'}"
          BODY="${BODY//$'\r'/'%0D'}"
          echo "::set-output name=BODY::$BODY"

      - name: Publish legacy package to npm
        if: steps.automerge.outputs.mergeResult == 'merged'
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm whoami
          npm publish

      - name: Publish types package to npm
        if: steps.automerge.outputs.mergeResult == 'merged'
        working-directory: build
        run: |
          npm publish

      - name: Create Github Release
        if: steps.automerge.outputs.mergeResult == 'merged'
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ steps.version.outputs.result }}
          name: Release v${{ steps.version.outputs.result }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.result, '-') }}
          body: ${{ steps.extract_release.outputs.BODY }}